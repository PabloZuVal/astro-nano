---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/profile.jpeg" } = Astro.props;

// Structured data for SEO
const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  name: "Pablo Zúñiga Valenzuela",
  url: "https://pablozuniga.me",
  image: "https://pablozuniga.me/profile.jpeg",
  jobTitle: "Software Engineer",
  description: "Full Stack Software Engineer specializing in AI-powered solutions and full-stack development",
  sameAs: [
    "https://www.linkedin.com/in/pablozunigavalenzuela/",
    "https://github.com/PabloZuVal"
  ],
  knowsAbout: ["React", "NestJS", "Python", "FastAPI", "AI Development", "Full Stack Development", "PostgreSQL", "TypeScript"],
  alumniOf: {
    "@type": "EducationalOrganization",
    name: "Pontificia Universidad Católica de Valparaíso"
  }
};

const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: "Pablo Zúñiga Valenzuela - Software Engineer Portfolio",
  url: "https://pablozuniga.me",
  author: {
    "@type": "Person",
    name: "Pablo Zúñiga Valenzuela"
  },
  description: "Portfolio and professional information of Pablo Zúñiga Valenzuela, Software Engineer specializing in AI and full-stack development"
};
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<!-- Google Search Console Verification -->
<!-- To verify site ownership with Google Search Console:
     1. Go to https://search.google.com/search-console
     2. Add your property (https://pablozuniga.me)
     3. Choose HTML tag verification method
     4. Google will provide a meta tag like: <meta name="google-site-verification" content="your-verification-code" />
     5. Add that meta tag below this comment
     Example: <meta name="google-site-verification" content="your-verification-code-here" />
-->
<meta name="google-site-verification" content="pSaQ8I-UVy1uWzz4bNbuvjvelY3o7g3C5HdLLCJLyUI" />
<link rel="icon" type="image/svg+xml" href="/favicon-dark.ico" media="(prefers-color-scheme: dark)">
<link rel="icon" type="image/svg+xml" href="/favicon-light.ico" media="(prefers-color-scheme: light)">
<!-- <link rel="icon" type="image/x-icon" href="/favicon.ico"> -->
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Pablo Zúñiga Valenzuela" />
<meta name="keywords" content="Pablo Zúñiga Valenzuela, Pablo Zuniga, Software Engineer, Full Stack Developer, AI Developer, React Developer, NestJS, Python, FastAPI, Valparaíso Chile, Web Developer, AI Solutions, Machine Learning, OpenAI, Claude Code" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- JSON-LD Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(personSchema)} />
<script type="application/ld+json" set:html={JSON.stringify(websiteSchema)} />

<ViewTransitions  />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        "link[as=\"font\"]"
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    });

    window.matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", event => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      }
    );

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }

function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      )
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

  window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    // const userTheme = localStorage.theme;
    toggleTheme(false);
    localStorage.setItem("theme", "light");

    // if (userTheme === "light" || userTheme === "dark") {
    //   toggleTheme(userTheme === "dark");
    // } else {
    //   // toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    // }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
